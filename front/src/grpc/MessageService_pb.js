// source: MessageService.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.ru.miet.example.grpc.chat.service.GetMessageRequest', null, global);
goog.exportSymbol('proto.ru.miet.example.grpc.chat.service.GetMessageResponse', null, global);
goog.exportSymbol('proto.ru.miet.example.grpc.chat.service.Message', null, global);
goog.exportSymbol('proto.ru.miet.example.grpc.chat.service.SendMessageRequest', null, global);
goog.exportSymbol('proto.ru.miet.example.grpc.chat.service.SendMessageResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ru.miet.example.grpc.chat.service.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ru.miet.example.grpc.chat.service.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ru.miet.example.grpc.chat.service.Message.displayName = 'proto.ru.miet.example.grpc.chat.service.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ru.miet.example.grpc.chat.service.SendMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ru.miet.example.grpc.chat.service.SendMessageRequest.displayName = 'proto.ru.miet.example.grpc.chat.service.SendMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ru.miet.example.grpc.chat.service.SendMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ru.miet.example.grpc.chat.service.SendMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ru.miet.example.grpc.chat.service.SendMessageResponse.displayName = 'proto.ru.miet.example.grpc.chat.service.SendMessageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ru.miet.example.grpc.chat.service.GetMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ru.miet.example.grpc.chat.service.GetMessageRequest.displayName = 'proto.ru.miet.example.grpc.chat.service.GetMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ru.miet.example.grpc.chat.service.GetMessageResponse.repeatedFields_, null);
};
goog.inherits(proto.ru.miet.example.grpc.chat.service.GetMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ru.miet.example.grpc.chat.service.GetMessageResponse.displayName = 'proto.ru.miet.example.grpc.chat.service.GetMessageResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.ru.miet.example.grpc.chat.service.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ru.miet.example.grpc.chat.service.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ru.miet.example.grpc.chat.service.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chatid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    senderid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    text: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdtime: (f = msg.getCreatedtime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ru.miet.example.grpc.chat.service.Message}
 */
proto.ru.miet.example.grpc.chat.service.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ru.miet.example.grpc.chat.service.Message;
  return proto.ru.miet.example.grpc.chat.service.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ru.miet.example.grpc.chat.service.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ru.miet.example.grpc.chat.service.Message}
 */
proto.ru.miet.example.grpc.chat.service.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChatid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSenderid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ru.miet.example.grpc.chat.service.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ru.miet.example.grpc.chat.service.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ru.miet.example.grpc.chat.service.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getChatid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSenderid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedtime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ru.miet.example.grpc.chat.service.Message} returns this
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 chatId = 2;
 * @return {number}
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.getChatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ru.miet.example.grpc.chat.service.Message} returns this
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.setChatid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 senderId = 3;
 * @return {number}
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.getSenderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ru.miet.example.grpc.chat.service.Message} returns this
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.setSenderid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ru.miet.example.grpc.chat.service.Message} returns this
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp createdTime = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.getCreatedtime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ru.miet.example.grpc.chat.service.Message} returns this
*/
proto.ru.miet.example.grpc.chat.service.Message.prototype.setCreatedtime = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ru.miet.example.grpc.chat.service.Message} returns this
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.clearCreatedtime = function() {
  return this.setCreatedtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ru.miet.example.grpc.chat.service.Message.prototype.hasCreatedtime = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ru.miet.example.grpc.chat.service.SendMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ru.miet.example.grpc.chat.service.SendMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chatid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    recipientid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ru.miet.example.grpc.chat.service.SendMessageRequest}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ru.miet.example.grpc.chat.service.SendMessageRequest;
  return proto.ru.miet.example.grpc.chat.service.SendMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ru.miet.example.grpc.chat.service.SendMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ru.miet.example.grpc.chat.service.SendMessageRequest}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChatid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRecipientid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ru.miet.example.grpc.chat.service.SendMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ru.miet.example.grpc.chat.service.SendMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChatid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getRecipientid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ru.miet.example.grpc.chat.service.SendMessageRequest} returns this
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ru.miet.example.grpc.chat.service.SendMessageRequest} returns this
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 chatId = 3;
 * @return {number}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.prototype.getChatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ru.miet.example.grpc.chat.service.SendMessageRequest} returns this
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.prototype.setChatid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 recipientId = 4;
 * @return {number}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.prototype.getRecipientid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ru.miet.example.grpc.chat.service.SendMessageRequest} returns this
 */
proto.ru.miet.example.grpc.chat.service.SendMessageRequest.prototype.setRecipientid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ru.miet.example.grpc.chat.service.SendMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ru.miet.example.grpc.chat.service.SendMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ru.miet.example.grpc.chat.service.SendMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statusdesc: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ru.miet.example.grpc.chat.service.SendMessageResponse}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ru.miet.example.grpc.chat.service.SendMessageResponse;
  return proto.ru.miet.example.grpc.chat.service.SendMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ru.miet.example.grpc.chat.service.SendMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ru.miet.example.grpc.chat.service.SendMessageResponse}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ru.miet.example.grpc.chat.service.StatusCode} */ (reader.readEnum());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusdesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ru.miet.example.grpc.chat.service.SendMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ru.miet.example.grpc.chat.service.SendMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ru.miet.example.grpc.chat.service.SendMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStatusdesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional StatusCode statusCode = 1;
 * @return {!proto.ru.miet.example.grpc.chat.service.StatusCode}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageResponse.prototype.getStatuscode = function() {
  return /** @type {!proto.ru.miet.example.grpc.chat.service.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ru.miet.example.grpc.chat.service.StatusCode} value
 * @return {!proto.ru.miet.example.grpc.chat.service.SendMessageResponse} returns this
 */
proto.ru.miet.example.grpc.chat.service.SendMessageResponse.prototype.setStatuscode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string statusDesc = 2;
 * @return {string}
 */
proto.ru.miet.example.grpc.chat.service.SendMessageResponse.prototype.getStatusdesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ru.miet.example.grpc.chat.service.SendMessageResponse} returns this
 */
proto.ru.miet.example.grpc.chat.service.SendMessageResponse.prototype.setStatusdesc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ru.miet.example.grpc.chat.service.GetMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ru.miet.example.grpc.chat.service.GetMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chatid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pageparams: (f = msg.getPageparams()) && common_pb.PageParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageRequest}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ru.miet.example.grpc.chat.service.GetMessageRequest;
  return proto.ru.miet.example.grpc.chat.service.GetMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ru.miet.example.grpc.chat.service.GetMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageRequest}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChatid(value);
      break;
    case 3:
      var value = new common_pb.PageParams;
      reader.readMessage(value,common_pb.PageParams.deserializeBinaryFromReader);
      msg.setPageparams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ru.miet.example.grpc.chat.service.GetMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ru.miet.example.grpc.chat.service.GetMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChatid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPageparams();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.PageParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageRequest} returns this
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 chatId = 2;
 * @return {number}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.prototype.getChatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageRequest} returns this
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.prototype.setChatid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional PageParams pageParams = 3;
 * @return {?proto.ru.miet.example.grpc.chat.service.PageParams}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.prototype.getPageparams = function() {
  return /** @type{?proto.ru.miet.example.grpc.chat.service.PageParams} */ (
    jspb.Message.getWrapperField(this, common_pb.PageParams, 3));
};


/**
 * @param {?proto.ru.miet.example.grpc.chat.service.PageParams|undefined} value
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageRequest} returns this
*/
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.prototype.setPageparams = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageRequest} returns this
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.prototype.clearPageparams = function() {
  return this.setPageparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageRequest.prototype.hasPageparams = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ru.miet.example.grpc.chat.service.GetMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ru.miet.example.grpc.chat.service.GetMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chatid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pageparams: (f = msg.getPageparams()) && common_pb.PageParams.toObject(includeInstance, f),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.ru.miet.example.grpc.chat.service.Message.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageResponse}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ru.miet.example.grpc.chat.service.GetMessageResponse;
  return proto.ru.miet.example.grpc.chat.service.GetMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ru.miet.example.grpc.chat.service.GetMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageResponse}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChatid(value);
      break;
    case 2:
      var value = new common_pb.PageParams;
      reader.readMessage(value,common_pb.PageParams.deserializeBinaryFromReader);
      msg.setPageparams(value);
      break;
    case 3:
      var value = new proto.ru.miet.example.grpc.chat.service.Message;
      reader.readMessage(value,proto.ru.miet.example.grpc.chat.service.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ru.miet.example.grpc.chat.service.GetMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ru.miet.example.grpc.chat.service.GetMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChatid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPageparams();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.PageParams.serializeBinaryToWriter
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ru.miet.example.grpc.chat.service.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 chatId = 1;
 * @return {number}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.prototype.getChatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageResponse} returns this
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.prototype.setChatid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PageParams pageParams = 2;
 * @return {?proto.ru.miet.example.grpc.chat.service.PageParams}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.prototype.getPageparams = function() {
  return /** @type{?proto.ru.miet.example.grpc.chat.service.PageParams} */ (
    jspb.Message.getWrapperField(this, common_pb.PageParams, 2));
};


/**
 * @param {?proto.ru.miet.example.grpc.chat.service.PageParams|undefined} value
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageResponse} returns this
*/
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.prototype.setPageparams = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageResponse} returns this
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.prototype.clearPageparams = function() {
  return this.setPageparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.prototype.hasPageparams = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Message messages = 3;
 * @return {!Array<!proto.ru.miet.example.grpc.chat.service.Message>}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.ru.miet.example.grpc.chat.service.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ru.miet.example.grpc.chat.service.Message, 3));
};


/**
 * @param {!Array<!proto.ru.miet.example.grpc.chat.service.Message>} value
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageResponse} returns this
*/
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ru.miet.example.grpc.chat.service.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ru.miet.example.grpc.chat.service.Message}
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ru.miet.example.grpc.chat.service.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ru.miet.example.grpc.chat.service.GetMessageResponse} returns this
 */
proto.ru.miet.example.grpc.chat.service.GetMessageResponse.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


goog.object.extend(exports, proto.ru.miet.example.grpc.chat.service);
